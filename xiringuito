#!/usr/bin/env bash
#
# Obscene SSH-based VPN for poors ;)
#
set -e

declare -r KERNEL=$(uname -s | tr [A-Z] [a-z])
if [[ ${KERNEL} != linux && ${KERNEL} != darwin ]]; then
  echo "Unsupported system: ${KERNEL}"
  exit 2
fi

if [[ ${KERNEL} == darwin ]]; then
  if [[ ! $(ls -1 /dev/tun[0-9]) ]]; then
    echo "MacOSX Virtual Network Interface not installed!"
    echo "Get it here: http://tuntaposx.sourceforge.net/"
    exit 3
  fi
fi

if [[ ${#} -lt 1 ]]; then
  echo "Usage: ${0} [SSH_USER@]SSH_SERVER [NETWORK1, NETWORK2, ... NETWORKx]"
  exit 1
fi

cd $(dirname ${0})

./scripts/client-preexec.sh

echo -n "[ sudo check ] "; sudo true; echo

declare -r SSH_SERVER=${1}; shift

if [[ ${#} -gt 0 ]]; then
  declare -r NETWORKS=${@}
elif [[ -x ./discover-routes ]]; then
  declare -r NETWORKS=$(./discover-routes ${SSH_SERVER} | grep "^ROUTE:" | sed 's/.*://')
fi

declare -r IP_BASE=192.168.245
declare -r TUNNEL_ID_PATH=~/.xiringuito/tunnel_id
declare -r TUNNEL_ID_FILE=${TUNNEL_ID_PATH}/${SSH_SERVER}

if [[ ! -f ${TUNNEL_ID_FILE} ]]; then
  mkdir -p ${TUNNEL_ID_PATH}
  let GENERATED_ID=${RANDOM}%50+1
  echo ${GENERATED_ID} >${TUNNEL_ID_FILE}
fi

declare -r TUNNEL_ID=$(cat ${TUNNEL_ID_FILE})
declare -r REMOTE_PATH="/tmp/xiringuito.${TUNNEL_ID}"

declare -r SSH_OPTS="-oLogLevel=${SSH_LOG_LEVEL:-ERROR} -oConnectionAttempts=3 -oConnectTimeout=10"

if [[ ${KERNEL} == linux ]]; then
  declare -r LOCAL_TUNNEL_ID=${TUNNEL_ID}
else
  declare -r LOCAL_TUNNEL_ID=$(./scripts/${KERNEL}/get-local-tunnel-id.sh)
fi

trap 'exit 130' INT
trap teardown EXIT

function teardown() {
  if [[ ! ${SSH_PID} ]]; then
    sudo ./scripts/${KERNEL}/client-teardown.sh ${$} 0 ${LOCAL_TUNNEL_ID}
  fi
}

echo "TUNNEL ID: ${TUNNEL_ID} (local: ${LOCAL_TUNNEL_ID})"

if [[ ${KERNEL} == linux ]]; then
  ./scripts/${KERNEL}/client-setup.sh ${TUNNEL_ID} ${IP_BASE}
fi

ssh ${SSH_OPTS} ${SSH_SERVER} mkdir -p ${REMOTE_PATH}
scp ${SSH_OPTS} ./scripts/server-*.sh ${SSH_SERVER}:${REMOTE_PATH} >/dev/null

ssh ${SSH_OPTS} ${SSH_SERVER} ${REMOTE_PATH}/server-setup.sh ${TUNNEL_ID} ${IP_BASE}

sleep 1; echo -n "SERVER: ${SSH_SERVER} ... "
set +e
ssh ${SSH_OPTS} ${SSH_SERVER} pkill -f ${REMOTE_PATH}/server-execute.sh &>/dev/null
set -e
if [[ ${KERNEL} == linux ]]; then
  SSH_TUNNEL_CMD="ssh"
else
  SSH_TUNNEL_CMD="sudo -E ssh"
fi
${SSH_TUNNEL_CMD} ${SSH_OPTS} -oStrictHostKeyChecking=no -w ${LOCAL_TUNNEL_ID}:${TUNNEL_ID} ${SSH_SERVER} ${REMOTE_PATH}/server-execute.sh ${TUNNEL_ID} ${IP_BASE} &
SSH_PID=${!}
sudo ./scripts/${KERNEL}/client-teardown.sh ${$} ${SSH_PID} ${LOCAL_TUNNEL_ID} &

sleep 5

if [[ ${KERNEL} == darwin ]]; then
  ./scripts/${KERNEL}/client-setup.sh ${TUNNEL_ID} ${LOCAL_TUNNEL_ID} ${IP_BASE}
fi

set +e
for NETWORK in ${NETWORKS}; do
   echo "> ROUTE: ${NETWORK}"
  ./scripts/${KERNEL}/client-route.sh ${LOCAL_TUNNEL_ID} ${NETWORK}
done
set -e

if [[ ! ${NO_DNS} && ! -z "${NETWORKS}" ]]; then
  echo
  echo "* Will now replace your DNS config with one fetched from the SSH server."
  echo "* Set enviromental variable 'NO_DNS', if you do not want this to happen."
  REMOTE_RESOLV_CONF=$(ssh ${SSH_OPTS} ${SSH_SERVER} cat /etc/resolv.conf | grep -v "[#;]" )

  if [[ "${REMOTE_RESOLV_CONF}" =~ nameserver ]]; then
    echo "${REMOTE_RESOLV_CONF}" | ./scripts/client-update-resolv-conf.sh

    if [[ ${KERNEL} == darwin ]]; then
      ./scripts/${KERNEL}/client-update-macosx-dns.sh
    fi
  fi
fi

set +e
FAILED_PINGS=0
while [[ ${FAILED_PINGS} -lt 5 ]]; do
  kill -0 ${SSH_PID} &>/dev/null || exit 17

  ./scripts/client-ping-server.sh ${TUNNEL_ID} ${IP_BASE}
  if [[ ${?} -ne 0 ]]; then
    let FAILED_PINGS+=1
    echo "* Failed to ping server-side tunnel endpoint... (${FAILED_PINGS})"
  else
    FAILED_PINGS=0
  fi

  sleep 5
done

teardown
